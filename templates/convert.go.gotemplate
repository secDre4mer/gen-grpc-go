// Code generated by github.com/secDre4mer/gen-grpc-go; DO NOT EDIT.

package {{.PackageName}}

import (
{{- range $package := .RequiredPackages }}
    {{$package.Alias}} "{{$package.Path}}"
{{- end}}
)

{{- define "transformToInterfaceType" -}}
    toInterfaceType_{{.BaseName}}
{{- end}}

{{- define "transformToGrpcType" -}}
    toGrpcType_{{.BaseName}}
{{- end}}

{{- range .RequiredTypes }}
func toGrpcType_{{.BaseName}}(param {{.GoName}}) (result {{.GrpcName}}, err error) {
{{- if (eq .GrpcName .GoName) }}
    return param, nil
{{- else if (eq .Kind "primitive") -}}
    return ({{.GrpcName}})(param), nil
{{- else if (eq .Kind "struct") }}
    result = new({{dereference .GrpcName}})
{{- range .Fields}}
    result.{{.Name}}, err = {{template "transformToGrpcType" .Type}}(param.{{.Name}})
    if err != nil {
        return
    }
{{- end}}
    return result, nil
{{- else if (eq .Kind "array")}}
    result = make({{.GrpcName}}, len(param))
{{- if (eq .Elem.GrpcName .Elem.GoName) }}
    copy(result, param[:])
{{- else}}
    for i := range result {
        result[i], err = {{template "transformToGrpcType" .Elem}}(param[i])
        if err != nil {
            return
        }
    }
{{- end}}
    return result, nil
{{- else if (eq .Kind "slice")}}
    result = make({{.GrpcName}}, len(param))
{{- if (eq .Elem.GrpcName .Elem.GoName) }}
    copy(result, param)
{{- else}}
    for i := range result {
        result[i], err = {{template "transformToGrpcType" .Elem}}(param[i])
        if err != nil {
            return
        }
    }
{{- end}}
    return result, nil
{{- else if (eq .Kind "BinaryMarshaler")}}
    return param.MarshalBinary()
{{- end}}
}

func toInterfaceType_{{.BaseName}}(param {{.GrpcName}}) (result {{.GoName}}, err error) {
{{- if (eq .GrpcName .GoName) }}
    result = param
{{- else if (eq .Kind "primitive") -}}
    result = ({{.GoName}})(param)
{{- else if (eq .Kind "struct")}}
{{- range .Fields}}
    result.{{.Name}}, err = {{template "transformToInterfaceType" .Type}}(param.{{.Name}})
    if err != nil {
        return
    }
{{- end}}
{{- else if (eq .Kind "array")}}
{{- if (eq .Elem.GrpcName .Elem.GoName) }}
    copy(result[:], param)
{{- else}}
    for i := range result {
       result[i], err = {{template "transformToInterfaceType" .Elem}}(param[i])
        if err != nil {
            return
        }
    }
{{- end}}
{{- else if (eq .Kind "slice")}}
    result = make({{.GoName}}, len(param))
{{- if (eq .Elem.GrpcName .Elem.GoName) }}
    copy(result, param)
{{- else}}
    for i := range result {
        result[i], err = {{template "transformToInterfaceType" .Elem}}(param[i])
        if err != nil {
            return
        }
    }
{{- end}}
{{- else if (eq .Kind "BinaryMarshaler")}}
    err = result.UnmarshalBinary(param)
{{- end}}
    return
}
{{- end}}
