// Code generated by github.com/secDre4mer/gen-grpc-go; DO NOT EDIT.

package {{.PackageName}}

import (
    "context"

    "google.golang.org/grpc"

    original "{{.Package}}"
)

{{- $name := .Name }}

func Register{{$name}}(server *grpc.Server, internal original.{{$name}}) {
    Register{{$name}}Server(server, &{{$name}}ServerWrapper{Internal: internal})
}

type {{.Name}}ServerWrapper struct {
    Internal original.{{.Name}}
    Unimplemented{{.Name}}Server
}

{{ range .Methods}}
func (w *{{$name}}ServerWrapper) {{.Name}}(ctx context.Context, request *{{.Name}}Request) (*{{.Name}}Response, error) {
{{- $usesError := .UsesError }}
{{- range $i, $arg := .Args}}
    convertedParam{{$i}}, err{{$i}} := {{template "transformToInterfaceType" $arg}}(request.Param{{$i}})
    if err{{$i}} != nil {
{{- if $usesError }}
        return nil, err{{$i}}
{{- else}}
        panic(err{{$i}})
{{- end}}
    }
{{- end}}
{{- if .UsesError}}
    {{ range $i, $arg := .Results}}result{{$i}}, {{end}}err
{{- else}}
    {{- $results := .Results}}
    {{ range $i, $arg := .Results}}{{if (gt $i 0)}}, {{- end -}}result{{$i}}{{- end -}}
{{- end}} := w.Internal.{{.Name}}(
{{- if .UsesContext}}
        ctx,
{{- end}}
{{- range $i, $arg := .Args}}
        convertedParam{{$i}},
{{- end}}
    )
{{- if .UsesError}}
    if err != nil {
        return nil, err
    }
{{- end}}
{{- range $i, $result := .Results}}
    convertedResult{{$i}}, err := {{template "transformToGrpcType" $result}}(result{{$i}})
    if err != nil {
{{- if $usesError }}
        return nil, err
{{- else}}
        panic(err)
{{- end}}
    }
{{- end}}
    response := &{{.Name}}Response{
{{- range $i, $arg := .Results}}
        Result{{$i}}: convertedResult{{$i}},
{{- end}}
    }
    return response, nil
}
{{end}}