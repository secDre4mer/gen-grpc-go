package {{.PackageName}}

import (
    "context"
    "runtime/trace"

    "google.golang.org/grpc"

    original "{{.Package}}"

{{- range $package := .RequiredPackages }}
{{- if $package.InterfaceDependency }}
    {{$package.Alias}} "{{$package.Path}}"
{{- end}}
{{- end}}
)
{{- $name := .Name }}

func Make{{$name}}Client(client grpc.ClientConnInterface) original.{{$name}} {
    return &{{$name}}ClientWrapper{New{{$name}}Client(client)}
}

type {{$name}}ClientWrapper struct {
    Internal {{$name}}Client
}

{{ range .Methods}}
func (w *{{$name}}ClientWrapper) {{.Name}}(
{{- if .UsesContext}}
    ctx context.Context,
{{- end}}
{{- range $i, $arg := .Args}}
    param{{$i}} {{.GoName}},
{{- end}}
) (
{{- range $i, $arg := .Results}}
    result{{$i}} {{.GoName}},
{{- end}}
{{- if .UsesError}}
    err error,
{{- end}}
) {
{{- $usesError := .UsesError }}
{{- range $i, $arg := .Args}}
    convertedParam{{$i}}, err := {{template "transformToGrpcType" $arg}}(param{{$i}})
    if err != nil {
{{- if $usesError }}
        return
{{- else}}
        panic(err)
{{- end}}
    }
{{- end}}
    request := &{{.Name}}Request{
{{- range $i, $arg := .Args}}
        Param{{$i}}: convertedParam{{$i}},
{{- end}}
    }
{{- if (not .UsesContext) }}
    ctx := context.Background()
{{- end}}
    region := trace.StartRegion(ctx, "{{.Name}}")
    response, err := w.Internal.{{.Name}}(ctx, request)
    region.End()
    if err != nil {
{{- if .UsesError}}
        return
{{- else}}
        panic(err)
{{- end}}
    }
{{- range $i, $arg := .Results}}
    result{{$i}}, err = {{template "transformToInterfaceType" $arg}}(response.Result{{$i}})
    if err != nil {
{{- if $usesError }}
        return
{{- else}}
        panic(err)
{{- end}}
    }
{{- else}}
    _ = response
{{- end}}
    return
}
{{end}}